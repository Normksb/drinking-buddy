{"version":3,"sources":["utils/mutations.js","utils/auth.js","components/Login.js","components/SignUp.js","components/Profile.js","app.js","index.js"],"names":["LOGIN_USER","gql","SIGNUP_USER","decode","this","getToken","token","isTokenExpired","exp","Date","now","localStorage","removeItem","getItem","idToken","setItem","window","location","assign","reload","Login","props","useState","email","password","formState","setFormState","useMutation","login","handleChange","error","data","event","target","name","value","handleFormSubmit","a","preventDefault","variables","Auth","console","message","onSubmit","className","placeholder","autoComplete","type","onChange","style","cursor","SignUp","age","weight","gender","signUp","log","id","Profile","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6938cc0.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        name\n      }\n    }\n  }\n`;\n\nexport const SIGNUP_USER = gql`\n  mutation Mutation($addUserName: String!, $addUserEmail: String!, $addUserPassword: String!, $addUserAge: Int!, $addUserWeight: Int!, $addUserGender: String) {\n    addUser(name: $addUserName, email: $addUserEmail, password: $addUserPassword, age: $addUserAge, weight: $addUserWeight, gender: $addUserGender) {\n      token\n      user {\n        name\n      }\n    }\n  }`;\n\n// export const SIGNUP_USER = gql\n//   mutation signUp($name: String!, $email: String!, $password: String!, $age: Int!, $weight: Int!, $gender: String!) {\n//     addUser(name: $name, email: $email, password: $password, age: $age, weight: $weight, gender: $gender) {\n//       token\n//       user {\n//         _id\n//         username\n//       }\n//     }\n//   }\n// `;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    // If there is a token and it's not expired, return `true`\n    return token && !this.isTokenExpired(token) ? true : false;\n  }\n\n  isTokenExpired(token) {\n    // Decode the token to get its expiration time that was set by the server\n    const decoded = decode(token);\n    // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\n    if (decoded.exp < Date.now() / 1000) {\n      localStorage.removeItem('id_token');\n      return true;\n    }\n    // If token hasn't passed its expiration time, return `false`\n    return false;\n  }\n\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.reload();\n  }\n}\n\nexport default new AuthService();\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\nimport { LOGIN_USER } from '../utils/mutations';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst Login = (props) => {\r\n    const [formState, setFormState] = useState({ email: '', password: '' });\r\n    const [login, { error, data }] = useMutation(LOGIN_USER);\r\n  \r\n    // update state based on form input changes\r\n    const handleChange = (event) => {\r\n      const { name, value } = event.target;\r\n  \r\n      setFormState({\r\n        ...formState,\r\n        [name]: value,\r\n      });\r\n    };\r\n  \r\n    // submit form\r\n    const handleFormSubmit = async (event) => {\r\n      event.preventDefault();\r\n      //console.log(formState);\r\n      try {\r\n        const { data } = await login({\r\n          variables: { ...formState },\r\n        });\r\n  \r\n        Auth.login(data.login.token);\r\n      } catch (error) {\r\n        console.error(error.message);\r\n      }\r\n  \r\n      // clear form values\r\n      setFormState({\r\n        email: '',\r\n        password: '',\r\n      });\r\n    };\r\n  \r\n    return (\r\n      <div>\r\n                <form onSubmit={handleFormSubmit}>\r\n                  <input\r\n                    className=\"form-input\"\r\n                    placeholder=\"Your email\"\r\n                    autoComplete=\"email\"\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    value={formState.email}\r\n                    onChange={handleChange}\r\n                  />\r\n                  <input\r\n                    className=\"form-input\"\r\n                    placeholder=\"******\"\r\n                    autoComplete=\"current-password\"\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    value={formState.password}\r\n                    onChange={handleChange}\r\n                  />\r\n                  <button\r\n                    style={{ cursor: 'pointer' }}\r\n                    type=\"submit\"\r\n                  >\r\n                    Submit\r\n                  </button>\r\n                </form>\r\n              \r\n        </div>\r\n      \r\n    );\r\n  };\r\n  \r\n  export default Login;","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\nimport { SIGNUP_USER } from '../utils/mutations';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst SignUp = (props) => {\r\n    const [formState, setFormState] = useState({ email: '',\r\n                                                 password: '',\r\n                                                 age: '',\r\n                                                 weight: '',\r\n                                                 name: '',\r\n                                                 gender: ''\r\n                                                 });\r\n    const [signUp, { error, data }] = useMutation(SIGNUP_USER);\r\n  \r\n    // update state based on form input changes\r\n    const handleChange = (event) => {\r\n      const { name, value } = event.target;\r\n  \r\n      setFormState({\r\n        ...formState,\r\n        [name]: value,\r\n      });\r\n    };\r\n  \r\n    // submit form\r\n    const handleFormSubmit = async (event) => {\r\n      event.preventDefault();\r\n      console.log(formState);\r\n      try {\r\n        const { data } = await signUp({\r\n          variables: { ...formState },\r\n        });\r\n  \r\n        Auth.login(data.login.token);\r\n      } catch (error) {\r\n        console.error(error.message);\r\n      }\r\n  \r\n      // clear form values\r\n      setFormState({ email: '',\r\n      password: '',\r\n      age: '',\r\n      weight: '',\r\n      name: '',\r\n      gender: '',\r\n      });\r\n    };\r\n    return (\r\n        <div>\r\n                  <form onSubmit={handleFormSubmit}>\r\n                    <input\r\n                      className=\"form-input\"\r\n                      placeholder=\"Your Name\"\r\n                      name=\"name\"\r\n                      type=\"text\"\r\n                      value={formState.name}\r\n                      onChange={handleChange}\r\n                    />\r\n                    <input\r\n                      className=\"form-input\"\r\n                      placeholder=\"Your email\"\r\n                      name=\"email\"\r\n                      type=\"email\"\r\n                      value={formState.email}\r\n                      onChange={handleChange}\r\n                    />\r\n                    <input\r\n                      className=\"form-input\"\r\n                      placeholder=\"******\"\r\n                      name=\"password\"\r\n                      type=\"password\"\r\n                      value={formState.password}\r\n                      onChange={handleChange}\r\n                    />\r\n                    <input\r\n                      className=\"form-input\"\r\n                      placeholder=\"Your Age\"\r\n                      name=\"age\"\r\n                      type=\"number\"\r\n                      value={formState.age}\r\n                      onChange={handleChange}\r\n                    />\r\n                    <input\r\n                      className=\"form-input\"\r\n                      placeholder=\"Your weight in Kgs\"\r\n                      name=\"weight\"\r\n                      type=\"number\"\r\n                      value={formState.weight}\r\n                      onChange={handleChange}\r\n                    />\r\n                    <select id=\"gender\">\r\n                        <option value=\"male\">male</option>\r\n                        <option value=\"female\">female</option>\r\n\r\n                    </select>\r\n                    <button\r\n                      style={{ cursor: 'pointer' }}\r\n                      type=\"submit\"\r\n                    >\r\n                      Submit\r\n                    </button>\r\n                  </form>\r\n                \r\n          </div>\r\n        \r\n      );\r\n}\r\n\r\nexport default SignUp","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { SIGNUP_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\n\nconst Profile = () => {\n  return (\n    <div>\n      <p>Name: </p>\n      <p>Email: </p>\n      <p>Age: </p>\n      <p>Weight: </p>\n      <p>Gender: </p>\n      \n    </div>\n  )\n}\n\nexport default Profile","import React from 'react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Login from './components/Login';\nimport SignUp from './components/SignUp';\nimport Profile from './components/Profile'\n\n// Create main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Login} />\n          <Route exact path=\"/signup\" component={SignUp} />\n          <Route exact path=\"/profile\" component={Profile} />\n        </Switch>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './app.scss';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}